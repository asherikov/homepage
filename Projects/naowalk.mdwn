[[!meta title="Nao walking module"]]

**Contents**
[[!toc]]


---
## Introduction

The project is focused on development of a specialized solver for a 
quadratic model predictive control problem, and a software module, 
which uses this solver to control walking behavior of a 
[[Nao|http://www.aldebaran-robotics.com]] humanoid robot.

The development has been performed within the
[[Mobile Robotics and Olfaction Lab |http://www.aass.oru.se/Research/Learning/index.html]]
at &Ouml;rebro University under the supervision of Dimitar Dimitrov 
(<http://www.drdv.net>).


---
## Source code and documentation

* The Nao module:  
> Sources <http://github.com/asherikov/oru_walk_module>  
> Documentation <http://asherikov.github.com/oru_walk_module>


* The specialized MPC solver, that produces trajectory for a center of mass:
> Sources <http://github.com/asherikov/smpc_solver>  
> Documentation <http://asherikov.github.com/smpc_solver>


* The inverse kinematics library:
> Sources <http://github.com/asherikov/nao_igm>  
> A brief overview <https://github.com/asherikov/nao_igm/blob/master/README.markdown>
Note, that the code of this library is partially generated by Maple, Maple
sources and different versions of the inverse kinematics functions are stored
in a separate branch:  
<https://github.com/asherikov/nao_igm/tree/MapleGeneratedFunctions>

---
## Key differences from the built-in module
* The inverse kinematics module works with position of the center of mass instead
of position of the trunk.

* QP problem for MPC is formulated differently and is solved using a specialized 
solver. The formulation of the problem allows variations of discretization and
height of the center of mass in a preview window.

---
## Video demonstration

There are several videos recorded from different viewpoints, they can be chosen
from a playlist.

<iframe width="560" height="315" 
src="http://www.youtube.com/embed/videoseries?list=PL93B16B2910EC7F3D&amp;hl=en_US" 
frameborder="0" allowfullscreen>
</iframe>

Alternatively, you can watch the videos on YouTube:  
<http://www.youtube.com/playlist?list=PL93B16B2910EC7F3D&feature=plcp>


A simulation of the walk is demonstrated in the second set of videos. The robot is
represented by a skeletal model. The red box shows a position of the center of mass.

<iframe width="560" height="315" 
src="http://www.youtube.com/embed/videoseries?list=PL509215FDE5DB30C2&amp;hl=en_US" 
frameborder="0" allowfullscreen>
</iframe>

<http://www.youtube.com/playlist?list=PL509215FDE5DB30C2&feature=plcp>

---
## Parameters

The parameters, that we used during the recording, are described below.

* Error feedback for CoM position
    - gain = 0.3;
    - threshold = 0.004 meter (smaller errors were ignored);

* MPC solver:
    - penalty for the velocity of CoM = 1;
    - gain for reference ZMP positions = 8000 (reference ZMP positions are centers of
footsteps);
    - penalty for the jerk of CoM = 1 (jerk is a control input);

* Steps:
    - step height = 0.02 meter;
    - step length = 0.04 meter (this is a relative distance from the position of the other 
foot, i.e. full step length is 0.08);
    - trajectories of a swing foot were build using Bezier curves;

* Preview window:
    - number of sampling intervals in a preview window = 40;
    - time in a single support = 400 ms.
    - time in a double support = 120 ms.
    - length of a sampling interval = 40 ms.

> Since we solve IK twice (the reason behind this is explained 
[[here|http://asherikov.github.com/oru_walk_module/pArch.html#pIGM]]) we need to get
positions of CoM at 20 ms and 40 ms (one and two control loops respectively). 
Therefore we set the length of the first two sampling intervals in a preview window 
to 20 ms, consequently, one of the remaining intervals switches between 20 and 40 ms. 
The total length of preview window is 2*20 + 37*40 + 40 or 20 = 1560 or 1540 ms. 

> Also, we can use the same sampling interval (20 ms.) in a preview window. In this case
if the number of sampling intervals is not changed, the length of a preview window is 
significantly shorter and a robot does not compensate for external disturbances as 
well. On the other hand, if the number of sampling intervals is increased, a solution
of a bigger QP problem takes more time.

---
## Performance

The data was collected during execution on the Nao v3.2, which is equipped with
AMD GEODE 500MHz CPU. No external disturbances were applied. 

Note, that we use a real time scheduling policy (SCHED_FIFO) for the [[control 
thread |http://asherikov.github.com/oru_walk_module/pArch.html#pControlThread]]. 

The execution time of one control loop (in seconds):

* min = 0.001997
* max = 0.005083
* mean = 0.003591

This time includes:

* Logging (takes about 0.0005 sec.).
* Solution of MPC problem.
    - min = 0.000540
    - max = 0.003133
    - mean = 0.001761
* Two solutions of inverse kinematics.

The QP solver uses active set method and activates from 0 to 7 constraints. In 
the initial and final double supports constraints are not added, during the walk 
the number of constraints is usually 6 or 7.

Solution of inverse kinematics takes from 1 to 3 iterations.

---
## Publications

* [[!bibtex file=".biblio.bib" key="Dimitrov-IROS11" format="citation"]]
[[(preprint)|http://www.aass.oru.se/Research/Learning/drdv_dir/publications/iros11/iros11_1.html]]
[[!toggle id="bibtexentry" text="(bibtex)"]]
[[!toggleable id="bibtexentry" text="""
[[!bibtex file=".biblio.bib" key="Dimitrov-IROS11" format="raw"]]
"""]] 


---
## Other

A simple Nao module, that was used to collect data while a robot is controlled by
the original walking module included in the standard software:  
<https://github.com/asherikov/nao_spy>
